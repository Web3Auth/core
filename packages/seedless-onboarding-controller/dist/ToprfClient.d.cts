import type { Encryptor, NodeAuthTokens } from "./types.cjs";
export type AuthenticationParams = {
    idTokens: string[];
    endpoints: string[];
    indexes: number[];
    verifier: string;
    verifierID: string;
};
export type AuthenticationResult = {
    /**
     * The tokens issued by the nodes on verifying the idTokens
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The public key of the share if the user is an existing user
     */
    existingEncKeyPublicData?: {
        pubKeyX: string;
        pubKeyY: string;
        keyIndex: number;
    };
    /**
     * Whether the user is an existing user
     */
    hasValidEncKey: boolean;
};
export type CreateEncKeyParams = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The password of the user.
     */
    password: string;
};
export type CreateEncKeyResult = {
    /**
     * The encryption key which is used to decrypt the secret data. This key is
     * generated by client and threshold shared with the nodes using TOPRF
     * protocol.
     */
    encKey: string;
};
export type StoreSecretDataParams = {
    /**
     * The tokens issued by the nodes on verifying the idTokens
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The encryption key under which the secret data will be encrypted.
     */
    encKey: string;
    /**
     * The secret data in hex encoding.
     */
    secretData: string;
};
export type StoreSecretDataResult = {
    /**
     * The encryption key which is used to decrypt the secret data.
     * This key is generated by client and threshold shared with the nodes using TOPRF protocol.
     */
    encKey: string;
    /**
     * The encrypted secret data
     */
    encryptedSecretData: string;
};
export type FetchSecretDataParams = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The password of the user.
     */
    password: string;
};
export type FetchSecretDataResult = {
    /**
     * The encryption key which is used to decrypt the secret data.
     * This key is generated by client and threshold shared with the nodes using TOPRF protocol.
     */
    encKey: string;
    /**
     * The secret data to be fetched
     */
    secretData: string[] | null;
};
export declare class ToprfAuthClient {
    #private;
    constructor(encryptor: Encryptor);
    /**
     * Mock implementation of the authenticate method
     *
     * @param params - The parameters for the authentication
     * @returns The authentication result
     */
    authenticate(params: AuthenticationParams): Promise<AuthenticationResult>;
    /**
     * Mock implementation of the createEncKey method
     * This method derives the encryption key from the password with Threshold OPRF
     *
     * @param params - The parameters for the createEncKey
     * @returns The createEncKey result
     */
    createEncKey(params: CreateEncKeyParams): Promise<CreateEncKeyResult>;
    storeSecretData(params: StoreSecretDataParams): Promise<StoreSecretDataResult>;
    fetchSecretData(params: FetchSecretDataParams): Promise<FetchSecretDataResult>;
}
//# sourceMappingURL=ToprfClient.d.cts.map