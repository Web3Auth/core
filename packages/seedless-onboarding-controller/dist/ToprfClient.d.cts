import type { NodeAuthTokens } from "./types.cjs";
/**
 * SEC1 encoded public key
 */
export type SEC1EncodedPublicKey = Uint8Array;
/**
 * KeyPair - The encryption/decryption private and public key pair.
 *
 * privKey - The decryption private key in bigint format.
 *
 * pubKey - The encryption public key in SEC1 encoded format.
 */
export type KeyPair = {
    sk: bigint;
    pk: SEC1EncodedPublicKey;
};
export type AuthenticationParams = {
    idTokens: string[];
    endpoints: string[];
    indexes: number[];
    verifier: string;
    verifierID: string;
};
export type AuthenticationResult = {
    /**
     * The tokens issued by the nodes on verifying the idTokens
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The public key of the share if the user is an existing user
     */
    existingEncKeyPublicData?: {
        pubKeyX: string;
        pubKeyY: string;
        keyIndex: number;
    };
    /**
     * Whether the user is an existing user
     */
    hasValidEncKey: boolean;
};
export type CreateEncKeyParams = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The login provider of the user.
     */
    verifier: string;
    /**
     * The deterministic identifier of the user from the login provider.
     */
    verifierID: string;
    /**
     * The password of the user.
     */
    password: string;
};
export type CreateEncKeyResult = {
    /**
     * The encryption key which is used to decrypt the secret data. This key is
     * generated by client and threshold shared with the nodes using TOPRF
     * protocol.
     */
    encKey: Uint8Array;
    /**
     * The authentication key which is used to provide valid signature for storing the secret data.
     */
    authKeyPair: KeyPair;
};
/**
 * nodeAuthTokens - The tokens issued by the nodes on authenticating the user.
 *
 * newPassword - The new password of the user.
 *
 * keyPair - The current encryption key of the user.
 *
 */
export type ChangeEncryptionKeyParams = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The login provider of the user.
     */
    verifier: string;
    /**
     * The deterministic identifier of the user from the login provider.
     */
    verifierID: string;
    /**
     * The new password of the user.
     */
    password: string;
    /**
     * The current encryption key of the user.
     */
    oldEncKey: Uint8Array;
    /**
     * The current authentication key of the user.
     */
    oldAuthKeyPair: KeyPair;
};
export type ChangeEncryptionKeyResult = {
    /**
     * The new encryption key of the user.
     */
    encKey: Uint8Array;
    /**
     * The new authentication key of the user.
     */
    authKeyPair: KeyPair;
};
export type StoreSecretDataParams = {
    /**
     * The tokens issued by the nodes on verifying the idTokens
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The encryption key under which the secret data will be encrypted.
     */
    encKey: string;
    /**
     * The secret data in hex encoding.
     */
    secretData: string;
};
export type BaseAddSecretDataItemParams<SecretDataType> = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The secret data to be stored.
     */
    secretData: SecretDataType;
    /**
     * The encryption key to be used to encrypt the secret data.
     */
    encKey: Uint8Array;
    /**
     * The authentication key to be used to provide valid signature for storing the secret data.
     */
    authKeyPair: KeyPair;
};
/**
 * nodeAuthTokens - The tokens issued by the nodes on authenticating the user.
 *
 * keyPair - The encryption/decryption key pair which is used to encrypt the secret data before storing it.
 *
 * secretData - The secret data to be registered.
 */
export type AddSecretDataItemParams = BaseAddSecretDataItemParams<Uint8Array>;
export type BatchAddSecretDataItemParams = BaseAddSecretDataItemParams<Uint8Array[]>;
export type StoreSecretDataResult = {
    /**
     * The encryption key which is used to decrypt the secret data.
     * This key is generated by client and threshold shared with the nodes using TOPRF protocol.
     */
    encKey: string;
    /**
     * The encrypted secret data
     */
    encryptedSecretData: string;
};
/**
 * keyPair - The encryption/decryption key pair which is used to decrypt the secret data.
 */
export type FetchAllSecretDataParams = {
    /**
     * The tokens issued by the nodes on verifying the idToken.
     */
    nodeAuthTokens: NodeAuthTokens;
    /**
     * The decryption key to be used to decrypt the secret data.
     */
    decKey: Uint8Array;
    /**
     * The authentication key to be used to provide valid signature for fetching the secret data.
     */
    authKeyPair: KeyPair;
};
export type FetchSecretDataResult = {
    /**
     * The encryption key which is used to decrypt the secret data.
     * This key is generated by client and threshold shared with the nodes using TOPRF protocol.
     */
    encKey: string;
    /**
     * The secret data to be fetched
     */
    secretData: string[] | null;
};
export declare class ToprfAuthClient {
    #private;
    constructor();
    /**
     * Mock implementation of the authenticate method
     *
     * @param params - The parameters for the authentication
     * @returns The authentication result
     */
    authenticate(params: AuthenticationParams): Promise<AuthenticationResult>;
    /**
     * Mock implementation of the createEncKey method
     * This method derives the encryption key from the password with Threshold OPRF
     *
     * @param params - The parameters for the createEncKey
     * @returns The createEncKey result
     */
    createEncKey(params: CreateEncKeyParams): Promise<CreateEncKeyResult>;
    /**
     * This function replaces the existing encryption key with a new one and copies the secret data of existing encryption key to the new one.
     *
     * @param params - The parameters for changing the encryption key.
     * @param params.nodeAuthTokens - The tokens issued by the nodes on authenticating the user.
     * @param params.newPassword - The new password of the user.
     * @param params.keyPair - The current encryption key of the user.
     *
     * @returns A promise that resolves with the new encryption key.
     */
    changeEncKey(params: ChangeEncryptionKeyParams): Promise<ChangeEncryptionKeyResult>;
    /**
     * This function encrypts the secret data using the encryption key and stores it nodes metadata store in encrypted form.
     *
     * @param params - The parameters for registering new secret data.
     * @param params.nodeAuthTokens - The tokens issued by the nodes on authenticating the user.
     * @param params.keyPair - The encryption/decryption key pair which is used to encrypt the secret data before storing it.
     * @param params.secretData - The array of secret data to be registered.
     *
     * @returns A promise that resolves if the operation is successful.
     */
    addSecretDataItem(params: AddSecretDataItemParams): Promise<void>;
    /**
     * This function fetches all secret data items associated with the given
     * auth pub key, decrypts, and returns them.
     *
     * @param params - The parameters for fetching the secret data.
     * @param params.nodeAuthTokens - The tokens issued by the nodes on authenticating the user.
     * @param params.decKey - The decryption key to be used to decrypt the secret data.
     * @param params.authKeyPair - The authentication key to be used to provide valid signature for fetching the secret data.
     *
     * @returns A promise that resolves with the decrypted secret data. Null if no secret data is found.
     */
    fetchSecretData(params: FetchAllSecretDataParams): Promise<Uint8Array[]>;
}
//# sourceMappingURL=ToprfClient.d.cts.map