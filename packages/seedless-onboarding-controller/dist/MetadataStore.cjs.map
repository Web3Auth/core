{"version":3,"file":"MetadataStore.cjs","sourceRoot":"","sources":["../src/MetadataStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,MAAa,aAAa;IAOxB,YAAY,SAAiB;QAN7B,0BAA0B;QACjB,iCACP,2DAA2D,EAAC;QAErD,2CAAmB;QAG1B,uBAAA,IAAI,4BAAc,SAAS,MAAA,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,IAAY;QACjC,MAAM,GAAG,GAAG,GAAG,uBAAA,IAAI,8BAAS,IAAI,uBAAA,IAAI,gCAAW,MAAM,CAAC;QACtD,MAAM,WAAW,GAAG,GAAG,uBAAA,IAAI,gCAAW,IAAI,GAAG,EAAE,CAAC;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;QAE3D,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAChC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;IACH,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,MAAM,GAAG,GAAG,GAAG,uBAAA,IAAI,8BAAS,IAAI,uBAAA,IAAI,gCAAW,MAAM,CAAC;QACtD,MAAM,WAAW,GAAG,GAAG,uBAAA,IAAI,gCAAW,IAAI,GAAG,EAAE,CAAC;QAEhD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAChC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;SAC3C,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AA7CD,sCA6CC","sourcesContent":["export class MetadataStore {\n  // Mock Metadata Store URL\n  readonly #baseURL: string =\n    'https://mock-simple-auth.sapphire-dev-2-1.authnetwork.dev';\n\n  readonly #keyPrefix: string;\n\n  constructor(keyPrefix: string) {\n    this.#keyPrefix = keyPrefix;\n  }\n\n  async set(key: string, data: string) {\n    const url = `${this.#baseURL}/${this.#keyPrefix}/set`;\n    const metadataKey = `${this.#keyPrefix}_${key}`;\n    const payload = JSON.stringify({ key: metadataKey, data });\n\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      body: payload,\n    });\n    if (!response.ok) {\n      throw new Error('Failed to set data');\n    }\n  }\n\n  async get(key: string): Promise<string | undefined> {\n    const url = `${this.#baseURL}/${this.#keyPrefix}/get`;\n    const metadataKey = `${this.#keyPrefix}_${key}`;\n\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      body: JSON.stringify({ key: metadataKey }),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get data');\n    }\n    const data = await response.json();\n    return data.message;\n  }\n}\n"]}