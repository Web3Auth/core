{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Json } from '@metamask/utils';\n\nexport type OAuthVerifier = 'google' | 'apple';\n\nexport type AuthenticateUserParams = {\n  idTokens: string[];\n  verifier: OAuthVerifier;\n  verifierID: string;\n  indexes: number[];\n  endpoints: string[];\n};\n\nexport type NodeAuthToken = {\n  /**\n   * The token issued by the node on verifying the idToken\n   */\n  nodeAuthToken: string;\n  /**\n   * The index of the node that issued the token\n   */\n  nodeIndex: number;\n};\n\nexport type NodeAuthTokens = NodeAuthToken[];\n\nexport type CreateSeedlessBackupParams = {\n  verifier: OAuthVerifier;\n  verifierID: string;\n  password: string;\n  seedPhrase: string;\n};\n\nexport type UpdatePasswordParams = {\n  verifier: OAuthVerifier;\n  verifierID: string;\n  newPassword: string;\n  oldPassword: string;\n};\n\n/**\n * @description Encryptor interface for encrypting and decrypting seedless onboarding vault.\n */\nexport type Encryptor = {\n  /**\n   * Encrypts the given object with the given password.\n   *\n   * @param password - The password to encrypt with.\n   * @param object - The object to encrypt.\n   * @returns The encrypted string.\n   */\n  encrypt: (password: string, object: Json) => Promise<string>;\n  /**\n   * Decrypts the given encrypted string with the given password.\n   *\n   * @param password - The password to decrypt with.\n   * @param encryptedString - The encrypted string to decrypt.\n   * @returns The decrypted object.\n   */\n  decrypt: (password: string, encryptedString: string) => Promise<unknown>;\n};\n"]}