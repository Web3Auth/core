{"version":3,"file":"encryption.cjs","sourceRoot":"","sources":["../src/encryption.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4CAAyC;AACzC,gDAAmD;AACnD,6CAA0C;AAC1C,iDAA8C;AAC9C,+CAA+D;AAE/D,MAAa,kBAAkB;IAA/B;QACW,uDAA4B,gBAAgB,EAAC;QAE7C,wCAAa,EAAE,EAAC;IAuC3B,CAAC;IArCC,OAAO,CAAC,GAAW,EAAE,IAAY;QAC/B,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAC,EAAE,CAAC,CAAC;QAC9B,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAA,SAAG,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAE/B,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,IAAI,CAAC,CAAC;QAClC,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QACzD,OAAO,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,iCAAyC;QAC5D,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC1D,MAAM,2BAA2B,GAAG,IAAI,UAAU,CAChD,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,QAAQ,CAAC,CACzD,CAAC;QAEF,MAAM,KAAK,GAAG,2BAA2B,CAAC,KAAK,CAAC,CAAC,EAAE,uBAAA,IAAI,qCAAW,CAAC,CAAC;QACpE,MAAM,UAAU,GAAG,2BAA2B,CAAC,KAAK,CAAC,uBAAA,IAAI,qCAAW,CAAC,CAAC;QAEtE,MAAM,GAAG,GAAG,IAAA,SAAG,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAExC,OAAO,IAAA,mBAAW,EAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,QAAgB;QAC9B,MAAM,IAAI,GAAG,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC;QAC9B,MAAM,GAAG,GAAG,IAAA,WAAI,EACd,eAAM,EACN,IAAI,EACJ,SAAS,EACT,uBAAA,IAAI,oDAA0B,EAC9B,EAAE,CACH,CAAC;QACF,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;CACF;AA1CD,gDA0CC","sourcesContent":["import { gcm } from '@noble/ciphers/aes';\nimport { bytesToUtf8 } from '@noble/ciphers/utils';\nimport { hkdf } from '@noble/hashes/hkdf';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes, utf8ToBytes } from '@noble/hashes/utils';\n\nexport class EncryptorDecryptor {\n  readonly #HKDF_ENCRYPTION_KEY_INFO = 'encryption-key';\n\n  readonly #nonceSize = 24;\n\n  encrypt(key: string, data: string): string {\n    const nonce = randomBytes(24);\n    const rawKey = new Uint8Array(Buffer.from(key, 'base64'));\n    const aes = gcm(rawKey, nonce);\n\n    const rawData = utf8ToBytes(data);\n    const cipherText = aes.encrypt(rawData);\n    const encryptedData = Buffer.concat([nonce, cipherText]);\n    return encryptedData.toString('base64');\n  }\n\n  decrypt(key: string, cipherTextCombinedWithNonceString: string): string {\n    const rawKey = new Uint8Array(Buffer.from(key, 'base64'));\n    const cipherTextCombinedWithNonce = new Uint8Array(\n      Buffer.from(cipherTextCombinedWithNonceString, 'base64'),\n    );\n\n    const nonce = cipherTextCombinedWithNonce.slice(0, this.#nonceSize);\n    const rawEncData = cipherTextCombinedWithNonce.slice(this.#nonceSize);\n\n    const aes = gcm(rawKey, nonce);\n    const rawData = aes.decrypt(rawEncData);\n\n    return bytesToUtf8(rawData);\n  }\n\n  keyFromPassword(password: string): string {\n    const seed = sha256(password);\n    const key = hkdf(\n      sha256,\n      seed,\n      undefined,\n      this.#HKDF_ENCRYPTION_KEY_INFO,\n      32,\n    );\n    return Buffer.from(key).toString('base64');\n  }\n}\n"]}