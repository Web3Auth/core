{"version":3,"file":"SeedlessOnboardingController.mjs","sourceRoot":"","sources":["../src/SeedlessOnboardingController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n  StateMetadata,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  encryptWithKey,\n  decryptWithKey,\n  keyFromPassword,\n  generateSalt,\n  importKey,\n  exportKey,\n} from '@metamask/browser-passworder';\nimport type { KeyringControllerStateChangeEvent } from '@metamask/keyring-controller';\n\nimport { SeedlessOnboardingControllerError } from './constants';\nimport { ToprfAuthClient } from './ToprfClient';\nimport type {\n  AuthenticateUserParams,\n  CreateSeedlessBackupParams,\n  Encryptor,\n  NodeAuthTokens,\n} from './types';\n\nconst controllerName = 'SeedlessOnboardingController';\n\n// State\nexport type SeedlessOnboardingControllerState = {\n  /**\n   * The node auth tokens from OAuth User authentication after the Social login.\n   *\n   * This values are used to authenticate users when they go through the Seedless Onboarding flow.\n   */\n  nodeAuthTokens?: NodeAuthTokens;\n  /**\n   * Indicates whether the user has already fully/partially completed the Seedless Onboarding flow.\n   *\n   * An encryption key is generated from user entered password using Threshold OPRF and the seed phrase is encrypted with the key.\n   * During the Seedless Onboarding Authentication step, TOPRF services check whether user has already generated the encryption key.\n   *\n   * If this value is `true`, we can assume that user already has completed the `SeedPhrase` generation step, and user will have to\n   * fetch the `SeedPhrase` with correct password. Otherwise, users will be asked to set up seedphrase and password, first.\n   */\n  hasValidEncryptionKey?: boolean;\n};\n\n// Actions\nexport type SeedlessOnboardingControllerGetStateActions =\n  ControllerGetStateAction<\n    typeof controllerName,\n    SeedlessOnboardingControllerState\n  >;\n\nexport type AllowedActions = SeedlessOnboardingControllerGetStateActions;\n\nexport type SeedlessOnboardingControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    SeedlessOnboardingControllerState\n  >;\n\n// events allowed to be subscribed\nexport type AllowedEvents =\n  | KeyringControllerStateChangeEvent\n  | SeedlessOnboardingControllerStateChangeEvent;\n\n// Messenger\n// TODO: re-evaluate and remove uncessary events/actions from the messenger\nexport type SeedlessOnboardingControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  AllowedActions,\n  AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type SeedlessOnboardingControllerOptions = {\n  messenger: SeedlessOnboardingControllerMessenger;\n\n  /**\n   * @description Initial state to set on this controller.\n   */\n  state?: SeedlessOnboardingControllerState;\n\n  /**\n   * @description Encryptor used for encryption and decryption of data.\n   * @default WebCryptoAPI\n   */\n  encryptor?: Encryptor;\n};\n\n/**\n * Seedless Onboarding Controller State Metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst seedlessOnboardingMetadata: StateMetadata<SeedlessOnboardingControllerState> =\n  {\n    nodeAuthTokens: {\n      persist: true,\n      anonymous: false,\n    },\n    hasValidEncryptionKey: {\n      persist: true,\n      anonymous: false,\n    },\n  };\n\nexport const defaultState: SeedlessOnboardingControllerState = {\n  hasValidEncryptionKey: false,\n};\n\nexport class SeedlessOnboardingController extends BaseController<\n  typeof controllerName,\n  SeedlessOnboardingControllerState,\n  SeedlessOnboardingControllerMessenger\n> {\n  readonly #encryptor: Encryptor = {\n    keyFromPassword: (password, salt, exportable, opts) => {\n      const randomSalt = salt || Math.random().toString(36).substring(2, 15);\n      const exportableKey = exportable ?? true;\n      return keyFromPassword(password, randomSalt, exportableKey, opts);\n    },\n    encryptWithKey,\n    decryptWithKey,\n    generateSalt,\n    importKey,\n    exportKey,\n  };\n\n  readonly toprfAuthClient: ToprfAuthClient;\n\n  constructor({\n    messenger,\n    encryptor,\n    state,\n  }: SeedlessOnboardingControllerOptions) {\n    super({\n      messenger,\n      metadata: seedlessOnboardingMetadata,\n      name: controllerName,\n      state: { ...state, ...defaultState },\n    });\n    if (encryptor) {\n      this.#encryptor = encryptor;\n    }\n    this.toprfAuthClient = new ToprfAuthClient(this.#encryptor);\n  }\n\n  /**\n   * @description Authenticate OAuth user using the seedless onboarding flow\n   * and determine if the user is already registered or not.\n   * @param params - The parameters for authenticate OAuth user.\n   * @param params.idToken - The ID token from Social login\n   * @param params.verifier - OAuth verifier\n   * @param params.verifierId - user email or id from Social login\n   * @returns A promise that resolves to the authentication result.\n   */\n  async authenticateOAuthUser(params: AuthenticateUserParams) {\n    const verificationResult = await this.toprfAuthClient.authenticate(params);\n    this.update((state) => {\n      state.nodeAuthTokens = verificationResult.nodeAuthTokens;\n      state.hasValidEncryptionKey = verificationResult.hasValidEncKey;\n    });\n    return verificationResult;\n  }\n\n  /**\n   * @description Backup seed phrase using the seedless onboarding flow.\n   * @param params - The parameters for backup seed phrase.\n   * @param params.password - The password used to create new wallet and seedphrase\n   * @param params.seedPhrase - The seed phrase to backup\n   * @returns A promise that resolves to the encrypted seed phrase and the encryption key.\n   */\n  async createSeedPhraseBackup({\n    password,\n    seedPhrase,\n  }: CreateSeedlessBackupParams): Promise<{\n    encryptedSeedPhrase: string;\n    encryptionKey: string;\n  }> {\n    const nodeAuthTokens = this.#getNodeAuthTokens();\n    const { encKey } = await this.toprfAuthClient.createEncKey({\n      nodeAuthTokens,\n      password,\n    });\n\n    const storeResult = await this.toprfAuthClient.storeSecretData({\n      nodeAuthTokens,\n      encKey,\n      secretData: seedPhrase,\n    });\n\n    return {\n      encryptedSeedPhrase: storeResult.encryptedSecretData,\n      encryptionKey: storeResult.encKey,\n    };\n  }\n\n  /**\n   * @description Fetch seed phrase metadata from the metadata store.\n   * @param password - The password used to create new wallet and seedphrase\n   * @returns A promise that resolves to the seed phrase metadata.\n   */\n  async fetchAndRestoreSeedPhraseMetadata(password: string) {\n    try {\n      const nodeAuthTokens = this.#getNodeAuthTokens();\n      const { encKey, secretData } = await this.toprfAuthClient.fetchSecretData(\n        {\n          nodeAuthTokens,\n          password,\n        },\n      );\n\n      return {\n        secretData,\n        encryptionKey: encKey,\n      };\n    } catch (error) {\n      console.error('[fetchAndRestoreSeedPhraseMetadata] error', error);\n      throw new Error(SeedlessOnboardingControllerError.IncorrectPassword);\n    }\n  }\n\n  /**\n   * @description Get the node auth tokens from the state.\n   * @returns The node auth tokens.\n   */\n  #getNodeAuthTokens() {\n    const { nodeAuthTokens } = this.state;\n    if (!nodeAuthTokens) {\n      throw new Error(SeedlessOnboardingControllerError.NoOAuthIdToken);\n    }\n    return nodeAuthTokens;\n  }\n}\n"]}